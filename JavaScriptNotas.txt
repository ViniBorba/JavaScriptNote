JavaScript Notas

- Console do JavaScript abre em qualquer navegador com o inspensionar elemento.

console.log é usado para exibir conteúdo para o console do JavaScript

console.log((10 * 4) + 10 - 8); igual a 42

- var 
	Quando cria uma variável, você escreve o nome da variável utilizando camelCase (a primeira palavra em minúsculo e as palavras seguintes, em maiúsculo).

var celsius = 12;
var fahrenheit = celsius * 1.8 + 32;/* convert celsius to fahrenheit here */

console.log(fahrenheit/* print out result here */);

Código		Caractere
\			\ (barra invertida)
\"			'' (aspas duplas)
\'			' (aspas simples)
\n			nova linha
\t			tab

 - null refere-se ao "valor de nada", enquanto undefined refere-se à "ausência de valor".

  NaN significa "Not-A-Number" e é constantemente retornado indicando um erro com operações numéricas. Por exemplo, se você escreveu um código que fez um cálculo matemático e o cálculo falhou ao produzir um número válido, NaN provavelmente será retornado.

  - Igualdade estrita
		Em vez disso, em JavaScript, é melhor utilizar igualdade estrita para ver se números, strings ou booleanos, etc. são idênticos em tipo e valor, sem realizar a conversão de tipos primeiramente. Para fazer uma comparação estrita, simplesmente adicione mais um símbolo de igual = ao final dos operadores == e !=
		1 === 1 que vai dar diferente se fizer "1" === 1
		1 !== "1" vai dar true, posi eles são diferentes, um é string e outro é numero

Código em JavaScript
var bill = 10.25 + 3.99 + 7.15;
var tip = bill * 0.15;
var total = bill + tip;
console.log("$"+total.toFixed(2));

 - if e else if
 	var weather = "sunny";

if (weather === "snow") {
  console.log("Traga um casaco.");
} else if (weather === "rain") {
  console.log("Traga uma jaqueta de chuva.");
} else {
  console.log("Vista o que você já está vestindo.");
}
	Imprime: Vista o que você já está vestindo.


 - If em cadeia
 var musicians = 1;

// your code goes here
if (musicians <= 0){
    console.log("not a group");
    } else if (musicians === 1){
        console.log("solo");
        } else if (musicians === 2){
            console.log("duet");
            } else if (musicians === 3){
                console.log("trio");
                } else if (musicians === 4){
                    console.log("quartet");
                    } else {
                        console.log("this is a large group");
                    }


- Operadores lógicos
	Operador	Significado		Exemplo				Como funciona
	&&			Lógico E		valor1 && valor2	Retorna verdadeiro se ambos o valor1 e o valor2 forem avaliados como verdadeiro.
	||			Lógico OU		valor1 || valor2	Retorna verdadeiro se valor1 ou valor2 (ou mesmo ambos!) forem avaliados como verdadeiro.
	!			Lógico NÃO		!valor1				Retorna o oposto do valor1. Se valor1 é verdadeiro, então !valor1 é falso.

 - IF com negação e operador logico

 var balance = 350.00;
var checkBalance = true;
var isActive = false;

// your code goes here
if(checkBalance){
    if(isActive && balance > 0){
        console.log("Your balance is $ "+ balance.toFixed(2));
    } else if(!isActive){
        console.log("Your account is no longer active.");
    } else if(balance === 0){
        console.log("Your account is empty.");
    } else{
        console.log("Your balance is negative. Please contact bank.");
    }
} else{
    console.log("Thank you. Have a nice day!");
}


 - Operador ternário:

 condicional ? (se condicional é verdadeiro) : (se condicional é falso)

 Para usar o operador ternário, primeiro forneça uma declaração condicional do lado esquerdo de ?. Então, entre o ? e :, escreva o código que seria executado 
 se a condição fosse verdadeira e, ao lado direito de :, escreva o código que seria executado se a condição fosse falsa.

  - Declaração switch

  var option = 3;

switch (option) {
  case 1:
    console.log("Você selecionou a opção 1.");
    break;
  case 2:
    console.log("Você selecionou a opção 2.");
    break;
  case 3:
    console.log("Você selecionou a opção 3.");
    break;
  case 4:
    console.log("Você selecionou a opção 4.");
    break;
  case 5:
    console.log("Você selecionou a opção 5.");
    break;
  case 6:
    console.log("Você selecionou a opção 6.");
    break; // tecnicamente, não necessário
}
  Importante lembrar que sem o break, tudo que vem a baixo do switch também vai ser colocado no programa.
  depois do ultimo break Você pode adicionar uma cláusula default para uma declaração switch, e ela será executada 
  	quando nenhum dos valores combinar com o valor da expressão switch.

  - Whhile 

  var start = 0; // quando começar
while (start < 10) { // quando parar
  console.log(start);
  start = start + 2; // como ir para o próximo item
}

 - For

 for (var k = 0; k < 200; k++) {
    console.log(k);
}

 for ( start; stop; step ) {
  // faça isto
}

 - Incremento e decremento
x++ or ++x // same as x = x + 1 
x-- or --x // same as x = x - 1
x += 3 // same as x = x + 3
x -= 6 // same as x = x - 6
x *= 2 // same as x = x * 2
x /= 5 // same as x = x / 5

 - A porra começa a ficar séria.
 FUNÇÃO EM JavaScript, um trecho de código que por argumentos (PARAMETRO) transforma uma entrada em uma saída que escrevi nesse trecho
 Parâmetros x argumentos : PARAMENTRO É NA MINHA FUNÇÃO, ARGUMENTO É QUANDO USO A FUNÇÃO. QUE VAI ENTRE ()
 *Funções empacotam o código para que você possa facilmente utilizar (e reutilizar) um bloco de código. 
 *Parâmetros são variáveis utilizadas para armazenar dados que são passados para a função utilizar. 
 *Argumentos são os dados propriamente ditos, passados para a função quando ela é invocada

 // x e y são parâmetros nesta declaração de função
function add(x, y) {
  // corpo da função
  var sum = x + y;
  return sum; // comando return
}

// 1 e 2 são passados para a função como argumentos
var sum = add(1, 2);

ISSO FUNCIONA!!!!!

function laugh(num){
    var risada = "";
    for(var x = 0; x < num; x++){
        risada = risada + "ha";
    }
    return risada+"!";
}
console.log(laugh(30));

 - Scope Librarian (SCOPO)
  Scopo é o lugar dentro das funções onde a variavel é declarado, tipo o private do Java.
  Funciona a variavel Global funciona para qlq coisa que estiver dentro da função onde ela foi declarada.

  Se um indentificador é declarado em escopo global, ele estará disponível em qualquer lugar.
  Se um identificador é declarado em um escopo de função, ele estará disponível na função em que foi declarado (mesmo em funções declaradas dentro de outra função).
  Ao tentar acessar um identificador, o mecanismo do JavaScript primeiramente olhará a função atual. Se ele não achar nada, continuará na próxima função em camada mais externa,
para ver se consegue encontrar o identificador. Isso continuará sendo feito até que ele alcance o escopo global.
  Identificadores globais são uma má idéia. Eles podem levar a nomes ruins para variáveis, conflito de nomes de variáveis e código confuso.

 - hoists é em JavaScript a capacidade da maquina que roda o código tranferir para cima todas as funções e variaveis, assi não importa onde vc declarou, se antes ou depois

 - expressão de função é quando contruo uma função em uma variavel (louco essa porra!)
 	 	var catSays = function(max)  É uma função anônima, uma função sem nome, e você a armazenou em uma variável chamada catSays.

 - Expressões de função inline

 		// expressão de função anônima
		var doSomething = function(y) {
		  return y + 1;
		};


		// expressão de função nomeada
		var doSomething = function addOne(y) {
		  	return y + 1;
		};

		// para qualquer uma das definições acima, chame a função da seguinte maneira:
		doSomething(5);

		// a declaração de função que recebe dois argumentos: uma função para exibir
		// uma mensagem, juntamente ao nome de um filme
		function movies(messageFunction, name) {
		  messageFunction(name);
		}

		// chama a função movies, passa a função e o nome do filme
		movies(function displayFavorite(movieName) {
		  console.log("My favorite movie is " + movieName);
		}, "Finding Nemo");

	!!!!! Isso de função inline é criar uma função que eu passo como se fosse um PARAMENTRO, ou seja, um dos meus PARAMENTRO é uma função!!!!!!

 - Array 
// cria o array `mixedData` com tipos de dados variados
var mixedData = ["abcd", 1, true, undefined, null, "all the things"];

// cria uma array `arraysInArrays`, composta de três arrays
var arraysInArrays = [
  [1, 2, 3], 
  ["Julia", "James"], 
  [true, false, true, false]
];

donuts[1] = "glazed cruller"; // muda o segundo elemento no array `donuts` para "glazed cruller"

Proŕiedades: 
	.length - número de elementos na array. Também serve para Strings

	.push() - coloca um elemento no fim do array.
	var donuts = ["glazed", "chocolate frosted", "Boston creme", "glazed cruller", "cinnamon sugar", "sprinkled"];
	donuts.push("powdered"); // mover "powdered" para o fim da array `donuts`

	.pop() - remover elementos do fim de uma array.
	var donuts = ["glazed", "chocolate frosted", "Boston creme", "glazed cruller", "cinnamon sugar", "sprinkled", "powdered"];
	donuts.pop(); // retira "powdered" do fim da array `donuts`

	.splice() - remove, muda, tira e troca elementos de um array;
	O primeiro argumento representa o índice inicial de onde você quer alterar a array, o segundo argumento representa o número de 
	elementos que você quer remover e o restante dos argumentos representam os elementos que você quer adicionar.
	var months = ['Jan', 'March', 'April', 'June'];
	!!!!!months.splice(1, 0, 'Feb');//vai na posição 1 do array, apaga 0 elementos a partir dessa posição e coloca 'Feb' (poderia ter mais elementos) depois da posição 1 !!!!!
	months.splice(-3, 0, 'Feb')//Vai no elemento -3, começo a contar de trás para frente os elementos do array
 
 	.reverse() - mostra de trás para frente

 - Loops de array
 	var donuts = ["jelly donut", "chocolate donut", "glazed donut"];

	// a variável `i` é usada para percorrer cada elemento na array
	for (var i = 0; i < donuts.length; i++) {
	    donuts[i] += " hole";
	    donuts[i] = donuts[i].toUpperCase();//propriedade para colocar em caixa alta
	}
	donuts array: ["JELLY DONUT HOLE", "CHOCOLATE DONUT HOLE", "GLAZED DONUT HOLE"]

	*Metodo forEach()
	var donuts = ["jelly donut", "chocolate donut", "glazed donut"]; //criando um array

	donuts.forEach(function(donut) { //usando o metodo forEach crio uma função inline para iterar sobre todos os elementos do array e mudar o nome deles.
	  donut += " hole";
	  donut = donut.toUpperCase();
	  console.log(donut);
	});

	*Metodo map()//itera o array e retorna um novo array
	var donuts = ["jelly donut", "chocolate donut", "glazed donut"]//criando o array
	var improvedDonuts = donuts.map(function(donut) {//estou criando um array novo chamado improvedDonuts passado por uma função que está no argumento do map()
	  donut += " hole";
	  donut = donut.toUpperCase();
	  return donut;
	});

 - Arrays em arrays 
 	loops dentro de Array de arrays
 	for (var row = 0; row < donutBox.length; row++) {// aqui, donutBox[row].length se refere ao tamanho do array de donut sendo percorrido atualmente
	  for (var column = 0; column < donutBox[row].length; column++) {
	    console.log(donutBox[row][column]);
	  }
	}

//Vai pegar os arrays do array numbers e colocar se é par ou impar para os números dentro dos arrays
var numbers = [
    [243, 12, 23, 12, 45, 45, 78, 66, 223, 3],
    [34, 2, 1, 553, 23, 4, 66, 23, 4, 55],
    [67, 56, 45, 553, 44, 55, 5, 428, 452, 3],
    [12, 31, 55, 445, 79, 44, 674, 224, 4, 21],
    [4, 2, 3, 52, 13, 51, 44, 1, 67, 5],
    [5, 65, 4, 5, 5, 6, 5, 43, 23, 4424],
    [74, 532, 6, 7, 35, 17, 89, 43, 43, 66],
    [53, 6, 89, 10, 23, 52, 111, 44, 109, 80],
    [67, 6, 53, 537, 2, 168, 16, 2, 1, 8],
    [76, 7, 9, 6, 3, 73, 77, 100, 56, 100]
];

// your code goes here
//function vini()
    for (var coluna = 0; coluna < numbers.length; coluna++){
        for(var linha = 0; linha < numbers[coluna].length; linha++ ){
            //console.log(numbers[coluna][linha]);
            if(numbers[coluna][linha] % 2 === 0){//olha essas [] 2 como é louco isso
                numbers[coluna][linha] = "even";
            }else{
                numbers[coluna][linha] = "odd";
            }
        }
    }